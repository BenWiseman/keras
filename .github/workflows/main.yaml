on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 1 * * *'

name: R-CMD-check

jobs:
  R-CMD-check:
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'macOS-latest', 'ubuntu-18.04']
        tf: ['2.5.0']
        include:
          - os: ubuntu-18.04
            rspm: https://packagemanager.rstudio.com/cran/__linux__/bionic/latest
          - tf: nightly
            allow_failure: true
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} (TF ${{ matrix.tf }})
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      TF_VERSION: ${{ matrix.tf }}
      PIP_NO_WARN_SCRIPT_LOCATION: false
      RETICULATE_AUTOCONFIGURE: 'FALSE'
      R_COMPILE_AND_INSTALL_PACKAGES: never
      RSPM: ${{ matrix.rspm }}

    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        shell: Rscript
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04"))')

      - name: Install dependencies
        shell: Rscript
        run: |
          remotes::install_github('rstudio/reticulate')
          remotes::install_github('rstudio/tensorflow')
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")

      - name: Install Miniconda
        shell: Rscript
        run: reticulate::install_miniconda()

      - name: Install TensorFlow
        shell: Rscript
        run: |
          remotes::install_local()
          keras::install_keras()

      - name: Check
        continue-on-error: ${{ contains(matrix.allow_failure, 'true') }}
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = '--no-manual', error_on = 'warning', check_dir = 'check')
        shell: Rscript

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash
